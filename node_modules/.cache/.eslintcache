[{"C:\\Users\\Kaleb\\source\\repos\\Fighting-Mongooses\\src\\index.js":"1","C:\\Users\\Kaleb\\source\\repos\\Fighting-Mongooses\\src\\components\\SignUpSide.js":"2","C:\\Users\\Kaleb\\source\\repos\\Fighting-Mongooses\\src\\components\\SignInSide.js":"3","C:\\Users\\Kaleb\\source\\repos\\Fighting-Mongooses\\src\\components\\JobsSideTest.js":"4","C:\\Users\\Kaleb\\source\\repos\\Fighting-Mongooses\\src\\components\\actionButtons.js":"5","C:\\Users\\Kaleb\\source\\repos\\Fighting-Mongooses\\src\\components\\firebase-config.js":"6","C:\\Users\\Kaleb\\source\\repos\\Fighting-Mongooses\\src\\components\\jobList.js":"7","C:\\Users\\Kaleb\\source\\repos\\Fighting-Mongooses\\src\\components\\jobForm.js":"8","C:\\Users\\Kaleb\\source\\repos\\Fighting-Mongooses\\src\\components\\popup.js":"9","C:\\Users\\Kaleb\\source\\repos\\Fighting-Mongooses\\src\\components\\profile.js":"10","C:\\Users\\Kaleb\\source\\repos\\Fighting-Mongooses\\src\\firebase.js":"11","C:\\Users\\Kaleb\\source\\repos\\Fighting-Mongooses\\src\\components\\TestHeader.js":"12","C:\\Users\\Kaleb\\source\\repos\\Fighting-Mongooses\\src\\components\\Welcome.js":"13","C:\\Users\\Kaleb\\source\\repos\\Fighting-Mongooses\\src\\components\\UserContext.js":"14","C:\\Users\\Kaleb\\source\\repos\\Fighting-Mongooses\\src\\components\\adminHeader.js":"15","C:\\Users\\Kaleb\\source\\repos\\Fighting-Mongooses\\src\\components\\nestedList.js":"16","C:\\Users\\Kaleb\\source\\repos\\Fighting-Mongooses\\src\\components\\card.js":"17","C:\\Users\\Kaleb\\source\\repos\\Fighting-Mongooses\\src\\components\\classCheckbox.js":"18","C:\\Users\\Kaleb\\source\\repos\\Fighting-Mongooses\\src\\components\\fullWidth.js":"19","C:\\Users\\Kaleb\\source\\repos\\Fighting-Mongooses\\src\\components\\checkBox.js":"20","C:\\Users\\Kaleb\\source\\repos\\Fighting-Mongooses\\src\\components\\checkboxGTA.js":"21","C:\\Users\\Kaleb\\source\\repos\\Fighting-Mongooses\\src\\components\\degreeCheckbox.js":"22","C:\\Users\\Kaleb\\source\\repos\\Fighting-Mongooses\\src\\components\\postionCheckbox.js":"23"},{"size":1192,"mtime":1682783978644,"results":"24","hashOfConfig":"25"},{"size":8276,"mtime":1682940793312,"results":"26","hashOfConfig":"25"},{"size":6524,"mtime":1682777210607,"results":"27","hashOfConfig":"25"},{"size":5601,"mtime":1682777210606,"results":"28","hashOfConfig":"25"},{"size":432,"mtime":1679506359528,"results":"29","hashOfConfig":"25"},{"size":750,"mtime":1682907416611,"results":"30","hashOfConfig":"25"},{"size":3127,"mtime":1682861033075,"results":"31","hashOfConfig":"25"},{"size":5390,"mtime":1682903569667,"results":"32","hashOfConfig":"25"},{"size":785,"mtime":1682777210612,"results":"33","hashOfConfig":"25"},{"size":54853,"mtime":1682778771744,"results":"34","hashOfConfig":"25"},{"size":598,"mtime":1682876831285,"results":"35","hashOfConfig":"25"},{"size":1040,"mtime":1681340325885,"results":"36","hashOfConfig":"25"},{"size":8357,"mtime":1682906600267,"results":"37","hashOfConfig":"25"},{"size":109,"mtime":1682777210609,"results":"38","hashOfConfig":"25"},{"size":2682,"mtime":1682777210610,"results":"39","hashOfConfig":"25"},{"size":2953,"mtime":1682778777805,"results":"40","hashOfConfig":"25"},{"size":4635,"mtime":1682903974055,"results":"41","hashOfConfig":"25"},{"size":1709,"mtime":1682773560300,"results":"42","hashOfConfig":"25"},{"size":351,"mtime":1682773560302,"results":"43","hashOfConfig":"25"},{"size":1653,"mtime":1682773560299,"results":"44","hashOfConfig":"25"},{"size":1610,"mtime":1682773560300,"results":"45","hashOfConfig":"25"},{"size":1638,"mtime":1682773560302,"results":"46","hashOfConfig":"25"},{"size":1630,"mtime":1682773560304,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"8dot6s",{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"58"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"58"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"58"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"58"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"C:\\Users\\Kaleb\\source\\repos\\Fighting-Mongooses\\src\\index.js",[],[],"C:\\Users\\Kaleb\\source\\repos\\Fighting-Mongooses\\src\\components\\SignUpSide.js",["123","124","125","126","127","128","129","130","131"],[],"C:\\Users\\Kaleb\\source\\repos\\Fighting-Mongooses\\src\\components\\SignInSide.js",["132","133"],[],"import React, { useState, useContext } from \"react\";\r\nimport { getAuth, signInWithEmailAndPassword } from \"firebase/auth\";\r\nimport UserContext from \"./UserContext\"; // Import UserContext instead of AuthContext\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport backgroundImage from '../../src/assets/images/logo.jpeg';\r\nimport { db } from \"./firebase-config\";\r\nimport { collection, doc, getDocs, query, where } from \"firebase/firestore\";\r\n\r\nconst Message = () => (\r\n  <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n    {\"UMKC CS 451-R Project\"}\r\n  </Typography>\r\n);\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    height: \"100vh\"\r\n  },\r\n  image: {\r\n    backgroundImage: `url(${backgroundImage})`,\r\n    backgroundRepeat: \"no-repeat\",\r\n    backgroundSize: \"cover\",\r\n    backgroundPosition: \"center\"\r\n  },\r\n  paper: {\r\n    margin: theme.spacing(8, 4),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\"\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: '#296BBD'\r\n  },\r\n  form: {\r\n    width: \"100%\",\r\n    marginTop: theme.spacing(1)\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2)\r\n  },\r\n  confirmationPopup: {\r\n    position: \"fixed\",\r\n    top: \"20px\",\r\n    left: \"50%\",\r\n    transform: \"translateX(-50%)\",\r\n    zIndex: 1000,\r\n    backgroundColor: \"rgba(0, 255, 0, 0.8)\",\r\n    borderRadius: \"5px\",\r\n    padding: \"10px 20px\",\r\n    color: \"#fff\"\r\n  },\r\n  errorPopup: {\r\n    position: \"fixed\",\r\n    top: \"20px\",\r\n    left: \"50%\",\r\n    transform: \"translateX(-50%)\",\r\n    zIndex: 1000,\r\n    backgroundColor: \"rgba(255, 0, 0, 0.8)\",\r\n    borderRadius: \"5px\",\r\n    padding: \"10px 20px\",\r\n    color: \"#fff\"\r\n  }\r\n  \r\n  \r\n}));\r\n\r\nconst SignInSide = () => {\r\n  const classes = useStyles();\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [error, setError] = useState(null);\r\n  const [showConfirmation, setShowConfirmation] = useState(false);\r\n  const [showErrorPopup, setShowErrorPopup] = useState(false);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const { setUser } = useContext(UserContext); // Use UserContext here\r\n\r\n    const signIn = async (event) => {\r\n      event.preventDefault();\r\n\r\n      const auth = getAuth();\r\n\r\n      try {\r\n        await signInWithEmailAndPassword(auth, email, password);\r\n\r\n        const userQuery = query(collection(db, \"profile\"), where(\"Email\", \"==\", email));\r\n        const querySnapshot = await getDocs(userQuery);\r\n        let userData = null;\r\n    \r\n        querySnapshot.forEach((doc) => {\r\n          userData = doc.data();\r\n        });\r\n    \r\n        if (userData) {\r\n          console.log(\"User signed in:\", userData);\r\n          setShowConfirmation(true); // Show the confirmation message\r\n\r\n          navigate('/');\r\n\r\n    \r\n          // Hide the confirmation message after 3 seconds\r\n          setTimeout(() => {\r\n            setShowConfirmation(false);\r\n          }, 3000);\r\n          \r\n          // Set user data in the AuthContext\r\n          setUser(userData);\r\n        }\r\n      } catch (error) {\r\n        setError(error.message);\r\n        console.error(\"Error signing in:\", error);\r\n        setShowErrorPopup(true); // Show the error popup\r\n\r\n        // Hide the error popup after 3 seconds\r\n        setTimeout(() => {\r\n          setShowErrorPopup(false);\r\n        }, 3000);\r\n      }\r\n    };\r\n  \r\n\r\n  \r\n\r\n  \r\n  const handleEmailChange = (event) => {\r\n    setEmail(event.target.value);\r\n  };\r\n\r\n  const handlePasswordChange = (event) => {\r\n    setPassword(event.target.value);\r\n  };\r\n  return (\r\n    <Grid container component=\"main\" className={classes.root}>\r\n      {showConfirmation && (\r\n        <div className={classes.confirmationPopup}>User is logged in.</div>\r\n      )}\r\n      {showErrorPopup && (\r\n  <div className={classes.errorPopup}>Invalid email or password.</div>\r\n)}\r\n      <CssBaseline />\r\n      <Grid item xs={false} sm={4} md={7} className={classes.image} />\r\n      <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\r\n        <div className={classes.paper}>\r\n          <Avatar className={classes.avatar}>\r\n          </Avatar>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Sign in\r\n          </Typography>\r\n          <form className={classes.form} noValidate onSubmit={signIn}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              id=\"email\"\r\n              label=\"Email Address\"\r\n              name=\"email\"\r\n              autoComplete=\"email\"\r\n              autoFocus\r\n              value={email}\r\n              onChange={handleEmailChange}\r\n            />\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              name=\"password\"\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              id=\"password\"\r\n              autoComplete=\"current-password\"\r\n              value={password}\r\n              onChange={handlePasswordChange}\r\n            />\r\n            <FormControlLabel\r\n              control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n              label=\"Remember me\"\r\n            />\r\n            <Button\r\n              type=\"submit\"\r\n              fullWidth\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.submit}\r\n            >\r\n              Sign In\r\n            </Button>\r\n            <Grid container>\r\n              <Grid item>\r\n                <Link href=\"/signup\" variant=\"body2\">\r\n                  {\"Don't have an account? Sign Up\"}\r\n                </Link>\r\n              </Grid>\r\n            </Grid>\r\n            <Box mt={5}>\r\n              <Message />\r\n            </Box>\r\n          </form>\r\n        </div>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default SignInSide;\r\n",[],"C:\\Users\\Kaleb\\source\\repos\\Fighting-Mongooses\\src\\components\\JobsSideTest.js",["134","135","136","137"],[],"import { React, useEffect, useState } from 'react';\r\nimport { db } from './firebase-config';\r\nimport { collection, getDocs, addDoc, doc, updateDoc, deleteDoc, query, where } from \"firebase/firestore\";\r\nimport JobForm from './jobForm';\r\nimport ActionButtons from './actionButtons';\r\nimport JobList from './jobList';\r\nimport Header from './adminHeader';\r\n\r\nfunction JobsSide() {\r\n  // Define state variables to manage form input and job data\r\n  const [jobs, setJobs] = useState([]);\r\n  const [courseID, setCourseID] = useState(\"\");\r\n  const [term, setTerm] = useState(\"\");\r\n  const [type, setType] = useState(\"\");\r\n  const [numPositions, setNumPosition] = useState(\"\");\r\n  const [state, setState] = useState(\"\");\r\n  \r\n\r\n  //popup card \r\n  const [users, setUsers] = useState([]);\r\n  const [showPopup, setShowPopup] = useState(false);\r\n\r\n  // reference to the \"backenddata\" collection in Firestore\r\n  const JobCollectionRef = collection(db, \"backenddata\");\r\n  // reference to the \"profile\" collection in Firestore\r\n  const UserCollectionRef = collection(db, \"profile\");\r\n\r\n  useEffect(() => {\r\n    getUserData();\r\n  }, []);\r\n\r\n  // Fetch data from Firestore and update the state variable \"jobs\"\r\n  const getUserData = async () => {\r\n    const data = await getDocs(UserCollectionRef);\r\n    setUsers(data.docs.map((elem) => ({ ...elem.data(), id: elem.id })));\r\n  };\r\n\r\n  // Use the useEffect hook to fetch data from Firestore when the component mounts\r\n  useEffect(() => {\r\n    getJobData();\r\n  }, []);\r\n\r\n  // Fetch data from Firestore and update the state variable \"jobs\"\r\n  const getJobData = async () => {\r\n    const data = await getDocs(JobCollectionRef);\r\n    setJobs(data.docs.map((elem) => ({ ...elem.data(), id: elem.id })));\r\n  };\r\n\r\n  // Add a new job to Firestore\r\n  const createJob = async () => {\r\n    try {\r\n      // Query Firebase for documents that match the specified courseID\r\n      const jobQuerySnapshot = await getDocs(\r\n        query(JobCollectionRef, where(\"Courseid\", \"==\", courseID.toUpperCase()))\r\n      );\r\n      if (jobQuerySnapshot.docs.length === 0) {\r\n        await addDoc(JobCollectionRef, {\r\n          Courseid: courseID.toUpperCase(),\r\n          Term: term,\r\n          Type: type,\r\n          NumPositions: numPositions,\r\n          State: state,\r\n        });\r\n        window.location.reload();\r\n      } else {\r\n        alert(`A job with CourseID ${courseID.toUpperCase()} already exists.`);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error creating document: \", error);\r\n    }\r\n  };\r\n\r\n  const handleUpdate = async () => {\r\n    // Create an object with the updated data for the document\r\n    const updatedData = {\r\n      Courseid: courseID,\r\n      Term: term,\r\n      Type: type,\r\n      NumPositions: numPositions,\r\n      State: state,\r\n    };\r\n    // Call the updateJob function with the courseID and updated data\r\n    const updated = await updateJob(courseID, updatedData);\r\n    if (!updated) {\r\n      alert(`No job found with CourseID ${courseID}`);\r\n    }\r\n  };\r\n\r\n  // Define a function that updates a document in Firebase with the specified ID\r\n  const updateJob = async (id, updatedData) => {\r\n    try {\r\n      // Query Firebase for documents that match the specified courseID\r\n      const jobQuerySnapshot = await getDocs(query(JobCollectionRef, where(\"Courseid\", \"==\", id)));\r\n      // If there is at least one document that matches the query\r\n      if (jobQuerySnapshot.docs.length > 0) {\r\n        // Get the reference to the first document that matches the query\r\n        const jobRef = jobQuerySnapshot.docs[0].ref;\r\n        // Update the document with the updated data\r\n        await updateDoc(jobRef, updatedData);\r\n        console.log(\"Document successfully updated!\");\r\n        window.location.reload();\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error updating document: \", error);\r\n    }\r\n  };\r\n\r\n  const handleDelete = async () => {\r\n    const deleted = await deleteJob(courseID);\r\n    if (!deleted) {\r\n      alert(`No job found with CourseID ${courseID}`);\r\n    }\r\n  };\r\n\r\n  const deleteJob = async (id) => {\r\n    try {\r\n      const jobQuerySnapshot = await getDocs(query(JobCollectionRef, where(\"Courseid\", \"==\", id)));\r\n      if (jobQuerySnapshot.docs.length > 0) {\r\n        await deleteDoc(jobQuerySnapshot.docs[0].ref);\r\n        console.log(\"Document successfully deleted!\");\r\n        window.location.reload();\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error deleting document: \", error);\r\n    }\r\n  };\r\n\r\n  // Check user\r\n  // Define an asynchronous function called \"checkUser\"\r\n  const checkUser = async () => {\r\n\r\n    await addDoc(JobCollectionRef, {\r\n      Courseid: courseID,\r\n      Term: term,\r\n      Type: type,\r\n      NumPositions: numPositions,\r\n      State: state,\r\n    });\r\n\r\n    // Reload the page after the new document has been added\r\n    window.location.reload();\r\n  };\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <div className='split-screen'>\r\n        <div className='split-screen-left'>\r\n          <JobForm setCourseID={setCourseID} setTerm={setTerm} setType={setType} setNumPosition={setNumPosition} setState={setState} />\r\n          <ActionButtons createJob={createJob} handleUpdate={handleUpdate} handleDelete={handleDelete} />\r\n        </div>\r\n        <div className='split-screen-right'>\r\n          <JobList jobs={jobs} users={users} showPopup={showPopup} setShowPopup={setShowPopup} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\nexport default JobsSide;","C:\\Users\\Kaleb\\source\\repos\\Fighting-Mongooses\\src\\components\\actionButtons.js",[],[],"C:\\Users\\Kaleb\\source\\repos\\Fighting-Mongooses\\src\\components\\firebase-config.js",[],[],"C:\\Users\\Kaleb\\source\\repos\\Fighting-Mongooses\\src\\components\\jobList.js",[],[],"C:\\Users\\Kaleb\\source\\repos\\Fighting-Mongooses\\src\\components\\jobForm.js",[],[],"C:\\Users\\Kaleb\\source\\repos\\Fighting-Mongooses\\src\\components\\popup.js",["138"],[],"import React from 'react';\r\nimport './popup.css';\r\n\r\nconst Popup = ({ title, children, onClose }) => (\r\n  <div className=\"popup-overlay\" onClick={onClose}>\r\n    <div\r\n      className=\"popup-content\"\r\n      style={{\r\n        backgroundColor: \"#fff\",\r\n        borderRadius: \"5px\",\r\n        boxShadow: \"0 0 10px rgba(0, 0, 0, 0.25)\",\r\n        maxWidth: \"500px\",\r\n        padding: \"20px\",\r\n        position: \"relative\",\r\n        zIndex: \"1001\",\r\n        position: \"absolute\",\r\n        top: \"50%\",\r\n        left: \"50%\",\r\n        transform: \"translate(-50%, -50%)\"\r\n      }}\r\n      onClick={(e) => {\r\n        e.stopPropagation();\r\n      }}\r\n    >\r\n      <h2>{title}</h2>\r\n      <button onClick={onClose}>&times;</button>\r\n      {children}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Popup;\r\n","C:\\Users\\Kaleb\\source\\repos\\Fighting-Mongooses\\src\\components\\profile.js",["139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155"],[],"import * as React from 'react'\r\nimport { useEffect, useState } from 'react';\r\nimport { db } from '../firebase';\r\nimport { collection, getDocs, addDoc, doc, updateDoc, deleteDoc, query, where } from \"firebase/firestore\"\r\nimport { Typography, Container, Grid, Card, CardActions, CardContent, TextField, CssBaseline, Divider, Button, Popover, PaperProps } from \"@material-ui/core\";\r\nimport { dbStorage } from '../firebase';\r\nimport { ref, uploadBytes } from \"firebase/storage\";\r\n\r\nconst getOptions = () => {\r\n    return [\r\n      { value: '', label: 'Select Grade' },\r\n      { value: 'A', label: 'Grade A' },\r\n      { value: 'A-', label: 'Grade A-' },\r\n      { value: 'B+', label: 'Grade B+' },\r\n      { value: 'B', label: 'Grade B' },\r\n      { value: 'B-', label: 'Grade B-' },\r\n      { value: 'C+', label: 'Grade C+' },\r\n      { value: 'C', label: 'Grade C' },\r\n      { value: 'C-', label: 'Grade C-' },\r\n      { value: 'F', label: 'Grade F' },\r\n      { value: 'WD', label: 'Withdrawn' },\r\n      { value: 'DROP', label: 'Dropped' },\r\n      { value: ' ', label: 'Remove Grade'}\r\n    ];\r\n  };\r\n\r\n  const getOptionsMajor = () => {\r\n    return [\r\n      { value: '', label: 'Select Major' },\r\n      { value: 'CS', label: 'Comp Sci' },\r\n      { value: 'IT', label: 'Info Tech' },\r\n      { value: 'ECE', label: 'ECE' },\r\n      { value: 'EE', label: 'EE' },\r\n    ];\r\n  };\r\n\r\n  const getOptionsLevel = () => {\r\n    return [\r\n      { value: '', label: 'Select Level' },\r\n      { value: 'BS', label: 'Bachelors' },\r\n      { value: 'MS', label: 'Masters' },\r\n      { value: 'PhD', label: 'Doctorate' },\r\n    ];\r\n  };\r\n\r\n  const getOptionsSem = () => {\r\n    return [\r\n      { value: '', label: 'Select Semester' },\r\n      { value: 'Fall', label: 'Fall' },\r\n      { value: 'Spring', label: 'Spring' },\r\n      { value: 'Summer', label: 'Summer' },\r\n    ];\r\n  };\r\n\r\n  const getOptionsYear = () => {\r\n    return [\r\n      { value: '', label: 'Select Year' },\r\n      { value: '2023', label: '2023' },\r\n      { value: '2024', label: '2024' },\r\n      { value: '2025', label: '2025' },\r\n      { value: '2026', label: '2026' },\r\n      { value: '2027', label: '2027' },\r\n      { value: '2028', label: '2028' },\r\n      { value: '2029', label: '2029' },\r\n      { value: '2030', label: '2030' },\r\n    ];\r\n  };\r\n\r\n  const options = getOptions(); //Drop down menu\r\n  const optionsMajor = getOptionsMajor(); //Drop down menu\r\n  const optionsLevel = getOptionsLevel(); //Drop down menu\r\n  const optionsSem = getOptionsSem(); //Drop down menu\r\n  const optionsYear = getOptionsYear(); //Drop down menu\r\n\r\nconst Profile = () => {\r\n//   const userEmail = 'sam@umkc.edu';\r\n    const userEmail = 'luke@umkc.edu';\r\n    const [data, setData] = useState([]); //Firestore Document\r\n\r\n    const [studentAnchor, setStudentAnchor] = useState(null)\r\n    const closeStudentAnchor = () => {\r\n        setStudentAnchor(null);\r\n        window.location.reload();\r\n    };\r\n    const editStudent = (event) => {\r\n        setStudentAnchor(event.currentTarget);\r\n    }\r\n\r\n    const [csAnchor, setCSAnchor] = useState(null)\r\n    const closecsAnchor = () => {\r\n        setCSAnchor(null);\r\n        window.location.reload();\r\n    };\r\n    const editGradeCS = (event) => {\r\n        setCSAnchor(event.currentTarget);\r\n    }\r\n\r\n    const [eceAnchor, seteceAnchor] = useState(null)\r\n    const closeECEAnchor = () => {\r\n        seteceAnchor(null);\r\n        window.location.reload();\r\n    };\r\n    const editGradeECE = (event) => {\r\n        seteceAnchor(event.currentTarget);\r\n    }\r\n\r\n{/* Profile Edit */}\r\nconst handleChangeMajor = async (event) => {\r\n    let {value} = event.target\r\n    const docRef = db.collection('profile').doc(userEmail);\r\n    docRef.update({ Major: value }).then(() => {});        \r\n};\r\n\r\nconst handleChangeLevel = async (event) => {\r\n    let {value} = event.target\r\n    const docRef = db.collection('profile').doc(userEmail);\r\n    docRef.update({ Level: value }).then(() => {});        \r\n};\r\n\r\nconst handleChangeSem = async (event) => {\r\n    let {value} = event.target\r\n    const docRef = db.collection('profile').doc(userEmail);\r\n    docRef.update({ GradSem: value }).then(() => {});        \r\n};\r\n\r\nconst handleChangeYear = async (event) => {\r\n    let {value} = event.target\r\n    const docRef = db.collection('profile').doc(userEmail);\r\n    docRef.update({ GradYear: value }).then(() => {});        \r\n};\r\n\r\n{/* CS Edit */}\r\n    const handleChangeCS101 = async (event) => {\r\n        let {value} = event.target\r\n        const docRef = db.collection('profile').doc(userEmail);\r\n        docRef.update({ cs101: value }).then(() => {});        \r\n};\r\n\r\n    const handleChangeCS101L = async (event) => {\r\n        let {value} = event.target\r\n        const docRef = db.collection('profile').doc(userEmail);\r\n        docRef.update({ cs101l: value }).then(() => {});        \r\n    };\r\n\r\n    const handleChangeCS191 = async (event) => {\r\n        let {value} = event.target\r\n        const docRef = db.collection('profile').doc(userEmail);\r\n        docRef.update({ cs191: value }).then(() => {});        \r\n    };\r\n \r\n    const handleChangeCS201 = async (event) => {\r\n        let {value} = event.target\r\n        const docRef = db.collection('profile').doc(userEmail);\r\n        docRef.update({ cs201: value }).then(() => {});        \r\n    };\r\n \r\n    const handleChangeCS201L = async (event) => {\r\n        let {value} = event.target\r\n        const docRef = db.collection('profile').doc(userEmail);\r\n        docRef.update({ cs201l: value }).then(() => {});        \r\n    };\r\n \r\n    const handleChangeCS291 = async (event) => {\r\n        let {value} = event.target\r\n        const docRef = db.collection('profile').doc(userEmail);\r\n        docRef.update({ cs291: value }).then(() => {});        \r\n    };\r\n \r\n    const handleChangeCS303 = async (event) => {\r\n        let {value} = event.target\r\n        const docRef = db.collection('profile').doc(userEmail);\r\n        docRef.update({ cs303: value }).then(() => {});        \r\n    };\r\n \r\n    const handleChangeCS320 = async (event) => {\r\n        let {value} = event.target\r\n        const docRef = db.collection('profile').doc(userEmail);\r\n        docRef.update({ cs320: value }).then(() => {});        \r\n    };\r\n \r\n    const handleChangeCS349 = async (event) => {\r\n        let {value} = event.target\r\n        const docRef = db.collection('profile').doc(userEmail);\r\n        docRef.update({ cs349: value }).then(() => {});        \r\n    };\r\n \r\n    const handleChangeCS394R = async (event) => {\r\n        let {value} = event.target\r\n        const docRef = db.collection('profile').doc(userEmail);\r\n        docRef.update({ cs394r: value }).then(() => {});        \r\n    };\r\n \r\n    const handleChangeCS404 = async (event) => {\r\n        let {value} = event.target\r\n        const docRef = db.collection('profile').doc(userEmail);\r\n        docRef.update({ cs404: value }).then(() => {});        \r\n    };\r\n \r\n    const handleChangeCS441 = async (event) => {\r\n        let {value} = event.target\r\n        const docRef = db.collection('profile').doc(userEmail);\r\n        docRef.update({ cs441: value }).then(() => {});        \r\n    };\r\n \r\n    const handleChangeCS449 = async (event) => {\r\n        let {value} = event.target\r\n        const docRef = db.collection('profile').doc(userEmail);\r\n        docRef.update({ cs449: value }).then(() => {});        \r\n    };\r\n \r\n    const handleChangeCS456 = async (event) => {\r\n        let {value} = event.target\r\n        const docRef = db.collection('profile').doc(userEmail);\r\n        docRef.update({ cs465: value }).then(() => {});        \r\n    };\r\n \r\n    const handleChangeCS457 = async (event) => {\r\n        let {value} = event.target\r\n        const docRef = db.collection('profile').doc(userEmail);\r\n        docRef.update({ cs457: value }).then(() => {});        \r\n    };\r\n \r\n    const handleChangeCS458 = async (event) => {\r\n        let {value} = event.target\r\n        const docRef = db.collection('profile').doc(userEmail);\r\n        docRef.update({ cs458: value }).then(() => {});        \r\n    };\r\n \r\n    const handleChangeCS461 = async (event) => {\r\n        let {value} = event.target\r\n        const docRef = db.collection('profile').doc(userEmail);\r\n        docRef.update({ cs461: value }).then(() => {});        \r\n    };\r\n \r\n    const handleChangeCS465R = async (event) => {\r\n        let {value} = event.target\r\n        const docRef = db.collection('profile').doc(userEmail);\r\n        docRef.update({ cs465r: value }).then(() => {});        \r\n    };\r\n \r\n    const handleChangeCS5520 = async (event) => {\r\n        let {value} = event.target\r\n        const docRef = db.collection('profile').doc(userEmail);\r\n        docRef.update({ cs5520: value }).then(() => {});        \r\n    };\r\n \r\n    const handleChangeCS5525 = async (event) => {\r\n        let {value} = event.target\r\n        const docRef = db.collection('profile').doc(userEmail);\r\n        docRef.update({ cs5525: value }).then(() => {});        \r\n    };\r\n \r\n    const handleChangeCS5552A = async (event) => {\r\n        let {value} = event.target\r\n        const docRef = db.collection('profile').doc(userEmail);\r\n        docRef.update({ cs5552a: value }).then(() => {});        \r\n    };\r\n \r\n    const handleChangeCS5565 = async (event) => {\r\n        let {value} = event.target\r\n        const docRef = db.collection('profile').doc(userEmail);\r\n        docRef.update({ cs5565: value }).then(() => {});        \r\n    };\r\n \r\n    const handleChangeCS5573 = async (event) => {\r\n        let {value} = event.target\r\n        const docRef = db.collection('profile').doc(userEmail);\r\n        docRef.update({ cs5573: value }).then(() => {});        \r\n    };\r\n \r\n    const handleChangeCS5590PA = async (event) => {\r\n        let {value} = event.target\r\n        const docRef = db.collection('profile').doc(userEmail);\r\n        docRef.update({ cs5590pa: value }).then(() => {});        \r\n    };\r\n \r\n    const handleChangeCS5592 = async (event) => {\r\n        let {value} = event.target\r\n        const docRef = db.collection('profile').doc(userEmail);\r\n        docRef.update({ cs5592: value }).then(() => {});        \r\n    };\r\n \r\n    const handleChangeCS5596A = async (event) => {\r\n        let {value} = event.target\r\n        const docRef = db.collection('profile').doc(userEmail);\r\n        docRef.update({ cs5596a: value }).then(() => {});        \r\n    };\r\n \r\n    const handleChangeCS5596B = async (event) => {\r\n        let {value} = event.target\r\n        const docRef = db.collection('profile').doc(userEmail);\r\n        docRef.update({ cs5596b: value }).then(() => {});        \r\n    }; \r\n\r\n\r\n{/* ECE Edit */}\r\n    const handleChangeECE216 = async (event) => {\r\n        let {value} = event.target\r\n        const docRef = db.collection('profile').doc(userEmail);\r\n        docRef.update({ ece216: value }).then(() => {});        \r\n    };\r\n\r\n    const handleChangeECE226 = async (event) => {\r\n        let {value} = event.target\r\n        const docRef = db.collection('profile').doc(userEmail);\r\n        docRef.update({ ece226: value }).then(() => {});        \r\n    };\r\n\r\n    const handleChangeECE228 = async (event) => {\r\n        let {value} = event.target\r\n        const docRef = db.collection('profile').doc(userEmail);\r\n        docRef.update({ ece228: value }).then(() => {});        \r\n    };\r\n\r\n    const handleChangeECE241 = async (event) => {\r\n        let {value} = event.target\r\n        const docRef = db.collection('profile').doc(userEmail);\r\n        docRef.update({ ece241: value }).then(() => {});        \r\n    };\r\n\r\n    const handleChangeECE276 = async (event) => {\r\n        let {value} = event.target\r\n        const docRef = db.collection('profile').doc(userEmail);\r\n        docRef.update({ ece276: value }).then(() => {});        \r\n    };\r\n\r\n    const handleChangeECE302 = async (event) => {\r\n        let {value} = event.target\r\n        const docRef = db.collection('profile').doc(userEmail);\r\n        docRef.update({ ece302: value }).then(() => {});        \r\n    };\r\n\r\n    const handleChangeECE330 = async (event) => {\r\n        let {value} = event.target\r\n        const docRef = db.collection('profile').doc(userEmail);\r\n        docRef.update({ ece330: value }).then(() => {});        \r\n    };\r\n\r\n    const handleChangeECE341r = async (event) => {\r\n        let {value} = event.target\r\n        const docRef = db.collection('profile').doc(userEmail);\r\n        docRef.update({ ece341r: value }).then(() => {});        \r\n    };\r\n\r\n    const handleChangeECE428r = async (event) => {\r\n        let {value} = event.target\r\n        const docRef = db.collection('profile').doc(userEmail);\r\n        docRef.update({ ece428r: value }).then(() => {});        \r\n    };\r\n \r\n    const handleChangeECE458 = async (event) => {\r\n        let {value} = event.target\r\n        const docRef = db.collection('profile').doc(userEmail);\r\n        docRef.update({ ece458: value }).then(() => {});        \r\n    };\r\n \r\n    const handleChangeECE466 = async (event) => {\r\n        let {value} = event.target\r\n        const docRef = db.collection('profile').doc(userEmail);\r\n        docRef.update({ ece466: value }).then(() => {});        \r\n    };\r\n \r\n    const handleChangeECE486 = async (event) => {\r\n        let {value} = event.target\r\n        const docRef = db.collection('profile').doc(userEmail);\r\n        docRef.update({ ece486: value }).then(() => {});        \r\n    };\r\n \r\n    const handleChangeECE477 = async (event) => {\r\n        let {value} = event.target\r\n        const docRef = db.collection('profile').doc(userEmail);\r\n        docRef.update({ ece477: value }).then(() => {});        \r\n    };\r\n \r\n    const handleChangeECE5558 = async (event) => {\r\n        let {value} = event.target\r\n        const docRef = db.collection('profile').doc(userEmail);\r\n        docRef.update({ ece5558: value }).then(() => {});        \r\n    };\r\n \r\n    const handleChangeECE5560 = async (event) => {\r\n        let {value} = event.target\r\n        const docRef = db.collection('profile').doc(userEmail);\r\n        docRef.update({ ece5560: value }).then(() => {});        \r\n    };\r\n \r\n    const handleChangeECE5567 = async (event) => {\r\n        let {value} = event.target\r\n        const docRef = db.collection('profile').doc(userEmail);\r\n        docRef.update({ ece5567: value }).then(() => {});        \r\n    };\r\n \r\n    const handleChangeECE5577 = async (event) => {\r\n        let {value} = event.target\r\n        const docRef = db.collection('profile').doc(userEmail);\r\n        docRef.update({ ece5577: value }).then(() => {});        \r\n    };\r\n \r\n    const handleChangeECE5578 = async (event) => {\r\n        let {value} = event.target\r\n        const docRef = db.collection('profile').doc(userEmail);\r\n        docRef.update({ ece5578: value }).then(() => {});        \r\n    };\r\n \r\n    const handleChangeECE5586 = async (event) => {\r\n        let {value} = event.target\r\n        const docRef = db.collection('profile').doc(userEmail);\r\n        docRef.update({ ece5586: value }).then(() => {});        \r\n    };\r\n \r\n    const handleChangeIT222 = async (event) => {\r\n        let {value} = event.target\r\n        const docRef = db.collection('profile').doc(userEmail);\r\n        docRef.update({ it222: value }).then(() => {});        \r\n    };\r\n \r\n    const handleChangeIT321 = async (event) => {\r\n        let {value} = event.target\r\n        const docRef = db.collection('profile').doc(userEmail);\r\n        docRef.update({ it321: value }).then(() => {});        \r\n    };\r\n \r\n {/* */}   \r\n    useEffect(() => {\r\n        console.log('Searching')\r\n        db.collection('profile').doc(userEmail).get()\r\n        .then(doc => {\r\n            if (doc.exists) {\r\n                console.log('Found Doc')\r\n                setData(doc.data());\r\n            } else {\r\n            console.log('No such document!');\r\n            }\r\n        })\r\n        .catch(error => {\r\n            console.log('Error getting document:', error);\r\n        });\r\n    }, []);\r\n\r\n    const[transcript, setTranscript] = useState(null)\r\n    const[GTACert, setGTACert] = useState(null)\r\n\r\n    const uploadTranscript = () => {\r\n        console.log('working')\r\n        if (transcript == null) return;\r\n        const transcriptRef = ref(dbStorage, `transcripts/${data.LName + '_transcript'}`)\r\n        uploadBytes(transcriptRef, transcript).then(() => {\r\n            alert('Upload Complete');\r\n        })\r\n    };\r\n\r\n    const uploadGTACert = () => {\r\n        console.log('working')\r\n        if (GTACert == null) return;\r\n        const gtacertRef = ref(dbStorage, `gtacert/${data.LName + '_gtacert'}`)\r\n        uploadBytes(gtacertRef, GTACert).then(() => {\r\n            alert('Upload Complete');\r\n        })\r\n    };\r\n\r\n  return (\r\n    <>\r\n{/*  Profile section */}\r\n        <CssBaseline />\r\n        <main>\r\n            <div>\r\n                <Container maxWidth='lg'>\r\n                    <Typography variant='h4' align='center' color='textprimary' gutterBottom='true'>\r\n                        Student Information:\r\n                    </Typography>\r\n                    <Divider variant='inset' />\r\n                    <Grid container spacing={5} justifyContent='center' columns={5}>\r\n                        <Grid item>\r\n                            <Typography variant='p' align='center' color='textSecondary' paragraph>\r\n                                <p>Student Name: {data.LName}, {data.FName}</p>\r\n                                <p>UMKC Email: {data.Email}</p>\r\n                                <p>Student ID: {data.IDnum}</p>\r\n                                <p>Major: {data.Major}</p>\r\n                                <p>Current Level: {data.Level}</p>\r\n                                <p>Graduation: {data.GradSem} {data.GradYear}</p>\r\n                                <p>Current GPA: {data.GPA}</p>\r\n                            </Typography>\r\n                        </Grid>\r\n                            <Grid button justifyContent='right'>\r\n                                <br></br>\r\n                                <br></br>\r\n                                <Button variant=\"contained\" onClick={editStudent}>Edit</Button>\r\n                            </Grid>\r\n                    </Grid>\r\n                </Container>\r\n\r\n                <br></br>\r\n                <br></br>\r\n\r\n{/*  Grade section */}\r\n                <Container>\r\n                    <Typography variant='h4' align='center' color='textprimary' gutterBottom='true'>\r\n                            Grades:\r\n                        </Typography>\r\n                        <Divider variant='inset'/>\r\n                        <div>\r\n                            <Grid container spacing={5} justifyContent='center' columns={5}>\r\n                                <Grid item>\r\n                                    <Typography variant='p' align='right' color='textSecondary' paragraph>\r\n                                        <p>CS 101:  {data.cs101}</p>\r\n                                        <p>CS 101L:  {data.cs101l}</p>\r\n                                        <p>CS 191:  {data.cs191}</p> \r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Typography variant='p' align='right' color='textSecondary' paragraph>\r\n                                        <p>CS 201R: {data.cs201r}</p>\r\n                                        <p>CS 201L: {data.cs201l}</p>\r\n                                        <p>CS 291: {data.cs291}</p> \r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Typography variant='p' align='right' color='textSecondary' paragraph>\r\n                                        <p>CS 303: {data.cs303}</p>\r\n                                        <p>CS 320: {data.cs320}</p>\r\n                                        <p>CS 349: {data.cs349}</p>\r\n                                        <p>CS 394R: {data.cs394r}</p>\r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Typography variant='p' align='right' color='textSecondary' paragraph>\r\n                                        <p>CS 404: {data.cs404}</p>\r\n                                        <p>CS 441: {data.cs441}</p>\r\n                                        <p>CS 449: {data.cs449}</p>\r\n                                        <p>CS 456: {data.cs456}</p>\r\n                                        <p>CS 457: {data.cs457}</p>\r\n                                        <p>CS 458: {data.cs458}</p> \r\n                                        <p>CS 461: {data.cs461}</p>\r\n                                        <p>CS 465R: {data.cs465r}</p>\r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Typography variant='p' align='right' color='textSecondary' paragraph>\r\n                                        <p>CS 5520: {data.cs5520}</p>\r\n                                        <p>CS 5525: {data.cs5525}</p>\r\n                                        <p>CS 5552A: {data.cs5552a}</p>\r\n                                        <p>CS 5565: {data.cs5565}</p>\r\n                                        <p>CS 5573: {data.cs5573}</p>\r\n                                        <p>CS 5590PA: {data.cs5590pa}</p> \r\n                                        <p>CS 5592: {data.cs5592}</p>\r\n                                        <p>CS 5596A: {data.cs5596a}</p>\r\n                                        <p>CS 5596B: {data.cs5596b}</p> \r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid button justifyContent='right'>\r\n                                    <br></br>\r\n                                    <br></br>\r\n                                    <Button variant=\"contained\" onClick={editGradeCS}>Edit</Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid container spacing={5} justifyContent='center' columns={5}>\r\n                                <Grid item>\r\n                                    <Typography variant='p' align='right' color='textSecondary' paragraph>\r\n                                        <p>ECE 216: {data.ece216}</p>\r\n                                        <p>ECE 226: {data.ece226}</p>\r\n                                        <p>ECE 228: {data.ece228}</p> \r\n                                        <p>ECE 241: {data.ece241}</p>\r\n                                        <p>ECE 276: {data.ece276}</p> \r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Typography variant='p' align='right' color='textSecondary' paragraph>\r\n                                        <p>ECE 302: {data.ece302}</p>\r\n                                        <p>ECE 330: {data.ece330}</p>\r\n                                        <p>ECE 341R: {data.ece341r}</p> \r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Typography variant='p' align='right' color='textSecondary' paragraph>\r\n                                        <p>ECE 428R: {data.ece428r}</p>\r\n                                        <p>ECE 458: {data.ece458}</p>\r\n                                        <p>ECE 466: {data.ece466}</p> \r\n                                        <p>ECE 477: {data.ece477}</p>\r\n                                        <p>ECE 486: {data.ece486}</p> \r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Typography variant='p' align='right' color='textSecondary' paragraph>\r\n                                        <p>ECE 5558: {data.ece5558}</p>\r\n                                        <p>ECE 5560: {data.ece5560}</p>\r\n                                        <p>ECE 5567: {data.ece5567}</p> \r\n                                        <p>ECE 5577: {data.ece5577}</p>\r\n                                        <p>ECE 5578: {data.ece5578}</p> \r\n                                        <p>ECE 5586: {data.ece5586}</p> \r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Typography variant='p' align='right' color='textSecondary' paragraph>\r\n                                        <p>IT 222: {data.it222}</p>\r\n                                        <p>IT 321: {data.it321}</p>\r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid>\r\n                                    <br></br>\r\n                                    <br></br>\r\n                                    <Button variant=\"contained\" onClick={editGradeECE}>Edit</Button>\r\n                                </Grid>\r\n\r\n\r\n{/* Popover Section Profile */}\r\n    <Grid>\r\n        <Popover\r\n            open={Boolean(studentAnchor)} \r\n            anchorEl={studentAnchor} \r\n            anchorOrigin={{\r\n                vertical: 'bottom', \r\n                horizontal: 'right'}}\r\n            transformOrigin={{\r\n                vertical: 'bottom',\r\n                horizontal: 'right'\r\n            }}>\r\n            <Typography variant='p'>\r\n                 <div style={{\r\n                     width: '400px',\r\n                     height: '500px'\r\n                 }}>\r\n                    <Grid container spacing={5} justifyContent='center' columns={5}>\r\n                        <Grid item>\r\n                            <Typography variant='p' align='justify' color='textSecondary' paragraph fontSize= \"6\">\r\n\r\n                                <p>Major: {data.Major}</p>\r\n                                <select onChange={handleChangeMajor}>\r\n                                    {optionsMajor.map((option) => (\r\n                                        <option key={option.value} value={option.value}>\r\n                                            {option.label}\r\n                                        </option>\r\n                                ))}</select>\r\n\r\n                                <p>Current Level: {data.Level}</p>\r\n                                <select onChange={handleChangeLevel}>\r\n                                    {optionsLevel.map((option) => (\r\n                                        <option key={option.value} value={option.value}>\r\n                                            {option.label}\r\n                                        </option>\r\n                                ))}</select>\r\n\r\n                                <p>Graduation Semester: {data.GradSem}</p>\r\n                                <select onChange={handleChangeSem}>\r\n                                    {optionsSem.map((option) => (\r\n                                        <option key={option.value} value={option.value}>\r\n                                            {option.label}\r\n                                        </option>\r\n                                ))}</select>\r\n\r\n                                <p>Graduation Year: {data.GradYear}</p>\r\n                                <select onChange={handleChangeYear}>\r\n                                    {optionsYear.map((option) => (\r\n                                        <option key={option.value} value={option.value}>\r\n                                            {option.label}\r\n                                        </option>\r\n                                ))}</select>\r\n\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid button justifyContent='right'>\r\n                            <br></br>\r\n                            <br></br>\r\n                            <Button variant=\"contained\" onClick={closeStudentAnchor}> Close </Button>\r\n                        </Grid>\r\n\r\n                    </Grid>\r\n                </div>\r\n\r\n            </Typography>\r\n        </Popover>\r\n\r\n    </Grid>\r\n\r\n\r\n {/* Popover Section CS */}\r\n    <Grid button justifyContent='right'>\r\n        <Popover \r\n            open={Boolean(csAnchor)} \r\n            anchorEl={csAnchor} \r\n            anchorOrigin={{\r\n                vertical: 'bottom', \r\n                horizontal: 'right'}}\r\n            transformOrigin={{\r\n                vertical: 'bottom',\r\n                horizontal: 'right'\r\n            }}>\r\n            <Typography variant='p'>\r\n                <div style={{\r\n                    width: '825px',\r\n                    height: '800px'\r\n                }}>\r\n                    <Grid container spacing={5} justifyContent='center' columns={5}>\r\n                        <Grid item>\r\n                            <Typography variant='p' align='justify' color='textSecondary' paragraph fontSize= \"6\">\r\n\r\n                                <p>CS 101: {data.CS101}</p>\r\n                                <select onChange={handleChangeCS101}>\r\n                                    {options.map((option) => (\r\n                                        <option key={option.value} value={option.value}>\r\n                                            {option.label}\r\n                                        </option>\r\n                                ))}</select>\r\n\r\n                                <p>CS 101L: {data.cs101l}</p>\r\n                                <select onChange={handleChangeCS101L}>\r\n                                    {options.map((option) => (\r\n                                        <option key={option.value} value={option.value}>\r\n                                            {option.label}\r\n                                        </option>\r\n                                ))}</select>\r\n\r\n                                <p>CS 191: {data.cs191}</p>\r\n                                <select onChange={handleChangeCS191}>\r\n                                    {options.map((option) => (\r\n                                        <option key={option.value} value={option.value}>\r\n                                            {option.label}\r\n                                        </option>\r\n                                ))}</select> \r\n\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Typography variant='p' align='justify' color='textSecondary' paragraph>\r\n                                <p>CS 201: {data.cs201}</p>\r\n                                <select onChange={handleChangeCS201}>\r\n                                    {options.map((option) => (\r\n                                        <option key={option.value} value={option.value}>\r\n                                            {option.label}\r\n                                        </option>\r\n                                ))}</select> \r\n\r\n                                <p>CS 201L: {data.cs201l}</p>   \r\n                                    <select onChange={handleChangeCS201L}>\r\n                                    {options.map((option) => (\r\n                                        <option key={option.value} value={option.value}>\r\n                                            {option.label}\r\n                                        </option>\r\n                                ))}</select> \r\n\r\n                                <p>CS 291: {data.cs291}</p> \r\n                                <select onChange={handleChangeCS291}>\r\n                                    {options.map((option) => (\r\n                                        <option key={option.value} value={option.value}>\r\n                                            {option.label}\r\n                                        </option>\r\n                                ))}</select> \r\n\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Typography variant='p' align='justify' color='textSecondary' paragraph>\r\n                                <p>CS 303: {data.cs303}</p>\r\n                                <select onChange={handleChangeCS303}>\r\n                                    {options.map((option) => (\r\n                                        <option key={option.value} value={option.value}>\r\n                                            {option.label}\r\n                                        </option>\r\n                                ))}</select> \r\n\r\n                                <p>CS 320: {data.cs320}</p>\r\n                                <select onChange={handleChangeCS320}>\r\n                                    {options.map((option) => (\r\n                                        <option key={option.value} value={option.value}>\r\n                                            {option.label}\r\n                                        </option>\r\n                                ))}</select> \r\n                                \r\n                                <p>CS 349: {data.cs349}</p> \r\n                                <select onChange={handleChangeCS349}>\r\n                                    {options.map((option) => (\r\n                                        <option key={option.value} value={option.value}>\r\n                                            {option.label}\r\n                                        </option>\r\n                                ))}</select> \r\n\r\n                                <p>CS 394R: {data.cs394r}</p>\r\n                                <select onChange={handleChangeCS394R}>\r\n                                    {options.map((option) => (\r\n                                        <option key={option.value} value={option.value}>\r\n                                            {option.label}\r\n                                        </option>\r\n                                ))}</select> \r\n\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Typography variant='p' align='justify' color='textSecondary' paragraph>\r\n                                <p>CS 404: {data.cs404}</p>\r\n                                <select onChange={handleChangeCS404}>\r\n                                    {options.map((option) => (\r\n                                        <option key={option.value} value={option.value}>\r\n                                            {option.label}\r\n                                        </option>\r\n                                ))}</select> \r\n\r\n                                <p>CS 441: {data.cs441}</p>\r\n                                <select onChange={handleChangeCS441}>\r\n                                    {options.map((option) => (\r\n                                        <option key={option.value} value={option.value}>\r\n                                            {option.label}\r\n                                        </option>\r\n                                ))}</select> \r\n\r\n                                <p>CS 449: {data.cs449}</p> \r\n                                <select onChange={handleChangeCS449}>\r\n                                    {options.map((option) => (\r\n                                        <option key={option.value} value={option.value}>\r\n                                            {option.label}\r\n                                        </option>\r\n                                ))}</select> \r\n\r\n                                <p>CS 456: {data.cs465}</p>\r\n                                <select onChange={handleChangeCS456}>\r\n                                    {options.map((option) => (\r\n                                        <option key={option.value} value={option.value}>\r\n                                            {option.label}\r\n                                        </option>\r\n                                ))}</select> \r\n\r\n                                <p>CS 457: {data.cs457}</p> \r\n                                <select onChange={handleChangeCS457}>\r\n                                    {options.map((option) => (\r\n                                        <option key={option.value} value={option.value}>\r\n                                            {option.label}\r\n                                        </option>\r\n                                ))}</select> \r\n\r\n                                <p>CS 458: {data.cs458}</p> \r\n                                <select onChange={handleChangeCS458}>\r\n                                    {options.map((option) => (\r\n                                        <option key={option.value} value={option.value}>\r\n                                            {option.label}\r\n                                        </option>\r\n                                ))}</select> \r\n\r\n                                <p>CS 461: {data.cs461}</p> \r\n                                <select onChange={handleChangeCS461}>\r\n                                    {options.map((option) => (\r\n                                        <option key={option.value} value={option.value}>\r\n                                            {option.label}\r\n                                        </option>\r\n                                ))}</select> \r\n\r\n                                <p>CS 465R: {data.cs465r}</p> \r\n                                <select onChange={handleChangeCS465R}>\r\n                                    {options.map((option) => (\r\n                                        <option key={option.value} value={option.value}>\r\n                                            {option.label}\r\n                                        </option>\r\n                                ))}</select> \r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Typography variant='p' align='justify' color='textSecondary' paragraph>\r\n                                <p>CS 5520: {data.cs5520}</p>\r\n                                <select onChange={handleChangeCS5520}>\r\n                                    {options.map((option) => (\r\n                                        <option key={option.value} value={option.value}>\r\n                                            {option.label}\r\n                                        </option>\r\n                                ))}</select> \r\n\r\n                                <p>CS 5525: {data.cs5525}</p>\r\n                                <select onChange={handleChangeCS5525}>\r\n                                    {options.map((option) => (\r\n                                        <option key={option.value} value={option.value}>\r\n                                            {option.label}\r\n                                        </option>\r\n                                ))}</select> \r\n\r\n                                <p>CS 5552A: {data.cs5552a}</p>\r\n                                <select onChange={handleChangeCS5552A}>\r\n                                    {options.map((option) => (\r\n                                        <option key={option.value} value={option.value}>\r\n                                            {option.label}\r\n                                        </option>\r\n                                ))}</select> \r\n                                    \r\n                                    <p>CS 5565: {data.cs5565}</p>\r\n                                <select onChange={handleChangeCS5565}>\r\n                                    {options.map((option) => (\r\n                                        <option key={option.value} value={option.value}>\r\n                                            {option.label}\r\n                                        </option>\r\n                                ))}</select> \r\n                                    \r\n                                    <p>CS 5573: {data.cs5573}</p>\r\n                                <select onChange={handleChangeCS5573}>\r\n                                    {options.map((option) => (\r\n                                        <option key={option.value} value={option.value}>\r\n                                            {option.label}\r\n                                        </option>\r\n                                ))}</select> \r\n                                    \r\n                                    <p>CS 5590PA: {data.cs5590pa}</p>\r\n                                <select onChange={handleChangeCS5590PA}>\r\n                                    {options.map((option) => (\r\n                                        <option key={option.value} value={option.value}>\r\n                                            {option.label}\r\n                                        </option>\r\n                                ))}</select> \r\n                                    \r\n                                    <p>CS 5592: {data.cs5592}</p>\r\n                                <select onChange={handleChangeCS5592}>\r\n                                    {options.map((option) => (\r\n                                        <option key={option.value} value={option.value}>\r\n                                            {option.label}\r\n                                        </option>\r\n                                ))}</select> \r\n                                    \r\n                                    <p>CS 5596A: {data.cs5596a}</p>\r\n                                <select onChange={handleChangeCS5596A}>\r\n                                    {options.map((option) => (\r\n                                        <option key={option.value} value={option.value}>\r\n                                            {option.label}\r\n                                        </option>\r\n                                ))}</select> \r\n                                    \r\n                                    <p>CS 5596B: {data.cs5596b}</p>\r\n                                <select onChange={handleChangeCS5596B}>\r\n                                    {options.map((option) => (\r\n                                        <option key={option.value} value={option.value}>\r\n                                            {option.label}\r\n                                        </option>\r\n                                ))}</select> \r\n\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid button justifyContent='right'>\r\n                            <br></br>\r\n                            <Button variant=\"contained\" onClick={closecsAnchor}> Close </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            </Typography>\r\n        </Popover>\r\n    </Grid>                                \r\n\r\n{/* Popover Section ECE/IT */}\r\n<Grid button justifyContent='right'>\r\n    <br></br>\r\n    {/* <Button variant=\"contained\" onClick={editGradeECE}>Edit</Button> */}\r\n    <Popover \r\n    open={Boolean(eceAnchor)} \r\n    anchorEl={eceAnchor} \r\n    anchorOrigin={{\r\n        vertical: 'bottom', \r\n        horizontal: 'right'}}\r\n    transformOrigin={{\r\n        vertical: 'bottom',\r\n        horizontal: 'right'\r\n    }}>\r\n        <Typography variant='p'>\r\n            <div style={{\r\n                width: '825px',\r\n                height: '550px'\r\n            }}>\r\n                <Grid container spacing={5} justifyContent='center' columns={5}>\r\n                    <Grid item>\r\n                        <Typography variant='p' align='justify' color='textSecondary' paragraph fontSize= \"6\">\r\n                            <p>ECE 216: {data.ece216}</p>\r\n                            <select onChange={handleChangeECE216}>\r\n                                {options.map((option) => (\r\n                                    <option key={option.value} value={option.value}>\r\n                                        {option.label}\r\n                                    </option>\r\n                            ))}</select>\r\n\r\n                            <p>ECE 226: {data.ece226}</p>\r\n                            <select onChange={handleChangeECE226}>\r\n                                {options.map((option) => (\r\n                                    <option key={option.value} value={option.value}>\r\n                                        {option.label}\r\n                                    </option>\r\n                            ))}</select>\r\n\r\n                            <p>ECE 228: {data.ece228}</p>\r\n                            <select onChange={handleChangeECE228}>\r\n                                {options.map((option) => (\r\n                                    <option key={option.value} value={option.value}>\r\n                                        {option.label}\r\n                                    </option>\r\n                            ))}</select> \r\n\r\n                            <p>ECE 241: {data.ece241}</p>\r\n                            <select onChange={handleChangeECE241}>\r\n                                {options.map((option) => (\r\n                                    <option key={option.value} value={option.value}>\r\n                                        {option.label}\r\n                                    </option>\r\n                            ))}</select>\r\n\r\n                            <p>ECE 276: {data.ece276}</p>\r\n                            <select onChange={handleChangeECE276}>\r\n                                {options.map((option) => (\r\n                                    <option key={option.value} value={option.value}>\r\n                                        {option.label}\r\n                                    </option>\r\n                            ))}</select> \r\n\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Typography variant='p' align='justify' color='textSecondary' paragraph>\r\n                            <p>ECE 302: {data.ece302}</p>\r\n                            <select onChange={handleChangeECE302}>\r\n                                {options.map((option) => (\r\n                                    <option key={option.value} value={option.value}>\r\n                                        {option.label}\r\n                                    </option>\r\n                            ))}</select> \r\n\r\n                            <p>ECE 330: {data.ece330}</p>   \r\n                                <select onChange={handleChangeECE330}>\r\n                                {options.map((option) => (\r\n                                    <option key={option.value} value={option.value}>\r\n                                        {option.label}\r\n                                    </option>\r\n                            ))}</select> \r\n\r\n                            <p>ECE 341R: {data.ece341r}</p> \r\n                            <select onChange={handleChangeECE341r}>\r\n                                {options.map((option) => (\r\n                                    <option key={option.value} value={option.value}>\r\n                                        {option.label}\r\n                                    </option>\r\n                            ))}</select> \r\n\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Typography variant='p' align='justify' color='textSecondary' paragraph>\r\n                            <p>ECE 428R: {data.ece428r}</p>\r\n                            <select onChange={handleChangeECE428r}>\r\n                                {options.map((option) => (\r\n                                    <option key={option.value} value={option.value}>\r\n                                        {option.label}\r\n                                    </option>\r\n                            ))}</select> \r\n\r\n                            <p>ECE 458: {data.ece458}</p>\r\n                            <select onChange={handleChangeECE458}>\r\n                                {options.map((option) => (\r\n                                    <option key={option.value} value={option.value}>\r\n                                        {option.label}\r\n                                    </option>\r\n                            ))}</select> \r\n                            \r\n                            <p>ECE 466: {data.ece466}</p> \r\n                            <select onChange={handleChangeECE466}>\r\n                                {options.map((option) => (\r\n                                    <option key={option.value} value={option.value}>\r\n                                        {option.label}\r\n                                    </option>\r\n                            ))}</select> \r\n\r\n                            <p>ECE 477: {data.ece477}</p>\r\n                            <select onChange={handleChangeECE477}>\r\n                                {options.map((option) => (\r\n                                    <option key={option.value} value={option.value}>\r\n                                        {option.label}\r\n                                    </option>\r\n                            ))}</select> \r\n\r\n                            <p>ECE 486: {data.ece486}</p> \r\n                            <select onChange={handleChangeECE486}>\r\n                                {options.map((option) => (\r\n                                    <option key={option.value} value={option.value}>\r\n                                        {option.label}\r\n                                    </option>\r\n                            ))}</select> \r\n\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Typography variant='p' align='justify' color='textSecondary' paragraph>\r\n                            <p>ECE 5558: {data.ece5558}</p>\r\n                            <select onChange={handleChangeECE5558}>\r\n                                {options.map((option) => (\r\n                                    <option key={option.value} value={option.value}>\r\n                                        {option.label}\r\n                                    </option>\r\n                            ))}</select> \r\n\r\n                            <p>ECE 5560: {data.ece5560}</p>\r\n                            <select onChange={handleChangeECE5560}>\r\n                                {options.map((option) => (\r\n                                    <option key={option.value} value={option.value}>\r\n                                        {option.label}\r\n                                    </option>\r\n                            ))}</select> \r\n\r\n                            <p>ECE 5567: {data.ece5567}</p> \r\n                            <select onChange={handleChangeECE5567}>\r\n                                {options.map((option) => (\r\n                                    <option key={option.value} value={option.value}>\r\n                                        {option.label}\r\n                                    </option>\r\n                            ))}</select> \r\n\r\n                            <p>ECE 5577: {data.cs5577}</p>\r\n                            <select onChange={handleChangeECE5577}>\r\n                                {options.map((option) => (\r\n                                    <option key={option.value} value={option.value}>\r\n                                        {option.label}\r\n                                    </option>\r\n                            ))}</select> \r\n\r\n                            <p>ECE 5578: {data.cs5578}</p> \r\n                            <select onChange={handleChangeECE5578}>\r\n                                {options.map((option) => (\r\n                                    <option key={option.value} value={option.value}>\r\n                                        {option.label}\r\n                                    </option>\r\n                            ))}</select> \r\n\r\n                            <p>ECE 5586: {data.cs5586}</p> \r\n                            <select onChange={handleChangeECE5586}>\r\n                                {options.map((option) => (\r\n                                    <option key={option.value} value={option.value}>\r\n                                        {option.label}\r\n                                    </option>\r\n                            ))}</select> \r\n\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Typography variant='p' align='justify' color='textSecondary' paragraph>\r\n                            <p>IT 222: {data.it222}</p>\r\n                            <select onChange={handleChangeIT222}>\r\n                                {options.map((option) => (\r\n                                    <option key={option.value} value={option.value}>\r\n                                        {option.label}\r\n                                    </option>\r\n                            ))}</select> \r\n\r\n                            <p>IT 321: {data.it321}</p>\r\n                            <select onChange={handleChangeIT321}>\r\n                                {options.map((option) => (\r\n                                    <option key={option.value} value={option.value}>\r\n                                        {option.label}\r\n                                    </option>\r\n                            ))}</select> \r\n\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid button justifyContent='right'>\r\n                        <br></br>\r\n                        <Button variant=\"contained\" onClick={closeECEAnchor}> Close </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </Typography>\r\n    </Popover>\r\n</Grid>\r\n</Grid>\r\n</div>\r\n</Container>\r\n\r\n    <br></br>\r\n    <br></br>\r\n\r\n    <Container maxWidth='lg'>\r\n        <Typography variant='h4' align='center' color='textprimary' gutterBottom='true'>\r\n            Files:\r\n        </Typography>\r\n        <Divider variant='inset' />\r\n        <Grid container spacing={5} justifyContent='center' columns={5} direction='column'>\r\n            <Grid item>\r\n                <Typography variant='p' align='center' color='textSecondary' paragraph>\r\n                    <p>Transcript: </p>\r\n                    <input type=\"file\" onChange={(event) => {setTranscript(event.target.files[0])}}/>\r\n                    <Button variant=\"contained\" onClick={uploadTranscript}>Upload</Button>\r\n                </Typography>\r\n            </Grid>\r\n\r\n            <Grid item>\r\n                <Typography variant='p' align='center' color='textSecondary' paragraph>\r\n                    <p>GTA Certification:</p>\r\n                    <input type=\"file\" onChange={(event) => {setGTACert(event.target.files[0])}}/>\r\n                    <Button variant=\"contained\" onClick={uploadGTACert}>Upload</Button>\r\n                </Typography>\r\n            </Grid>\r\n\r\n        </Grid>\r\n    </Container>\r\n            </div>\r\n        </main>\r\n\r\n    </>\r\n  );\r\n};\r\n\r\n\r\nexport default Profile","C:\\Users\\Kaleb\\source\\repos\\Fighting-Mongooses\\src\\firebase.js",[],[],"C:\\Users\\Kaleb\\source\\repos\\Fighting-Mongooses\\src\\components\\TestHeader.js",["156"],[],"C:\\Users\\Kaleb\\source\\repos\\Fighting-Mongooses\\src\\components\\Welcome.js",["157","158","159","160","161","162","163","164","165","166"],[],"C:\\Users\\Kaleb\\source\\repos\\Fighting-Mongooses\\src\\components\\UserContext.js",[],[],"C:\\Users\\Kaleb\\source\\repos\\Fighting-Mongooses\\src\\components\\adminHeader.js",["167"],[],"import * as React from \"react\";\r\nimport { useState } from \"react\";\r\n\r\n// importing material UI components\r\nimport AppBar from \"@mui/material/AppBar\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Toolbar from \"@mui/material/Toolbar\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Button from \"@mui/material/Button\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport MenuIcon from \"@mui/icons-material/Menu\";\r\nimport Drawer from \"@mui/material/Drawer\";\r\nimport List from \"@mui/material/List\";\r\nimport ListItem from \"@mui/material/ListItem\";\r\nimport ListItemText from \"@mui/material/ListItemText\";\r\nimport { Link } from \"react-router-dom\";\r\nimport umkcLogo from '../../src/assets/images/umkclogo.png';\r\n\r\nexport default function Header() {\r\n  const [drawerOpen, setDrawerOpen] = useState(false);\r\n\r\n  const toggleDrawer = (open) => (event) => {\r\n    if (\r\n      event.type === \"keydown\" &&\r\n      (event.key === \"Tab\" || event.key === \"Shift\")\r\n    ) {\r\n      return;\r\n    }\r\n    setDrawerOpen(open);\r\n  };\r\n\r\n  const sideMenuList = () => (\r\n\t<div\r\n\t  role=\"presentation\"\r\n\t  onClick={toggleDrawer(false)}\r\n\t  onKeyDown={toggleDrawer(false)}\r\n\t  style={{ backgroundColor: '#005293' }}\r\n\t>\r\n\t  <List>\r\n\t\t<img\r\n\t\t  alt=\"UMKC\"\r\n\t\t  src={umkcLogo}\r\n\t\t  style={{\r\n\t\t\theight: '100%',\r\n\t\t\tmaxHeight: '40px',\r\n\t\t  }}\r\n\t\t/>\r\n\t\t<ListItem button component={Link} to=\"/\">\r\n\t\t  <ListItemText\r\n\t\t\tprimary=\"Student View\"\r\n\t\t\tprimaryTypographyProps={{ style: { color: \"white\" } }} // Add this line to change the Student View text color to white\r\n\t\t  />\r\n\t\t</ListItem>\t\r\n\t  </List>\r\n\t</div>\r\n  );\r\n  \r\n\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Toolbar style={{ backgroundColor: \"#005293\", color: \"white\" }}>\r\n        <IconButton\r\n          size=\"large\"\r\n          edge=\"start\"\r\n          style={{ backgroundColor: \"#005293\", color: \"white\" }}\r\n          aria-label=\"menu\"\r\n          sx={{ mr: 2 }}\r\n          onClick={toggleDrawer(true)}\r\n        >\r\n          <MenuIcon />\r\n        </IconButton>\r\n        <Drawer\r\n          anchor=\"left\"\r\n          open={drawerOpen}\r\n          onClose={toggleDrawer(false)}\r\n\t\t  PaperProps={{\r\n\t\t\tstyle: {\r\n\t\t\t  backgroundColor: \"#005293\", // Add this line to change the background color of the entire drawer\r\n\t\t\t},\r\n\t\t  }}\r\n        >\r\n          {sideMenuList()}\r\n        </Drawer>\r\n        <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\r\n          Job Management Page\r\n        </Typography>\r\n        <Button\r\n          style={{ backgroundColor: \"#005293\", color: \"white\" }}\r\n          component={Link}\r\n          to=\"/signup\"\r\n        >\r\n          Logout\r\n        </Button>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n}","C:\\Users\\Kaleb\\source\\repos\\Fighting-Mongooses\\src\\components\\nestedList.js",[],[],"C:\\Users\\Kaleb\\source\\repos\\Fighting-Mongooses\\src\\components\\card.js",["168"],[],"C:\\Users\\Kaleb\\source\\repos\\Fighting-Mongooses\\src\\components\\classCheckbox.js",[],[],"C:\\Users\\Kaleb\\source\\repos\\Fighting-Mongooses\\src\\components\\fullWidth.js",[],[],"C:\\Users\\Kaleb\\source\\repos\\Fighting-Mongooses\\src\\components\\checkBox.js",[],[],"C:\\Users\\Kaleb\\source\\repos\\Fighting-Mongooses\\src\\components\\checkboxGTA.js",[],[],"C:\\Users\\Kaleb\\source\\repos\\Fighting-Mongooses\\src\\components\\degreeCheckbox.js",[],[],"C:\\Users\\Kaleb\\source\\repos\\Fighting-Mongooses\\src\\components\\postionCheckbox.js",[],[],{"ruleId":"169","severity":1,"message":"170","line":6,"column":8,"nodeType":"171","messageId":"172","endLine":6,"endColumn":24},{"ruleId":"169","severity":1,"message":"173","line":7,"column":8,"nodeType":"171","messageId":"172","endLine":7,"endColumn":16},{"ruleId":"169","severity":1,"message":"174","line":15,"column":31,"nodeType":"171","messageId":"172","endLine":15,"endColumn":37},{"ruleId":"169","severity":1,"message":"175","line":15,"column":44,"nodeType":"171","messageId":"172","endLine":15,"endColumn":53},{"ruleId":"169","severity":1,"message":"176","line":15,"column":55,"nodeType":"171","messageId":"172","endLine":15,"endColumn":64},{"ruleId":"169","severity":1,"message":"177","line":55,"column":10,"nodeType":"171","messageId":"172","endLine":55,"endColumn":15},{"ruleId":"178","severity":1,"message":"179","line":67,"column":6,"nodeType":"180","endLine":67,"endColumn":8,"suggestions":"181"},{"ruleId":"169","severity":1,"message":"182","line":84,"column":15,"nodeType":"171","messageId":"172","endLine":84,"endColumn":29},{"ruleId":"169","severity":1,"message":"183","line":163,"column":9,"nodeType":"171","messageId":"172","endLine":163,"endColumn":18},{"ruleId":"169","severity":1,"message":"184","line":19,"column":22,"nodeType":"171","messageId":"172","endLine":19,"endColumn":25},{"ruleId":"169","severity":1,"message":"185","line":84,"column":10,"nodeType":"171","messageId":"172","endLine":84,"endColumn":15},{"ruleId":"169","severity":1,"message":"184","line":3,"column":39,"nodeType":"171","messageId":"172","endLine":3,"endColumn":42},{"ruleId":"178","severity":1,"message":"179","line":30,"column":6,"nodeType":"180","endLine":30,"endColumn":8,"suggestions":"186"},{"ruleId":"178","severity":1,"message":"187","line":41,"column":6,"nodeType":"180","endLine":41,"endColumn":8,"suggestions":"188"},{"ruleId":"169","severity":1,"message":"183","line":136,"column":9,"nodeType":"171","messageId":"172","endLine":136,"endColumn":18},{"ruleId":"189","severity":1,"message":"190","line":16,"column":9,"nodeType":"191","messageId":"192","endLine":16,"endColumn":17},{"ruleId":"169","severity":1,"message":"193","line":4,"column":10,"nodeType":"171","messageId":"172","endLine":4,"endColumn":20},{"ruleId":"169","severity":1,"message":"194","line":4,"column":22,"nodeType":"171","messageId":"172","endLine":4,"endColumn":29},{"ruleId":"169","severity":1,"message":"174","line":4,"column":31,"nodeType":"171","messageId":"172","endLine":4,"endColumn":37},{"ruleId":"169","severity":1,"message":"184","line":4,"column":39,"nodeType":"171","messageId":"172","endLine":4,"endColumn":42},{"ruleId":"169","severity":1,"message":"175","line":4,"column":44,"nodeType":"171","messageId":"172","endLine":4,"endColumn":53},{"ruleId":"169","severity":1,"message":"176","line":4,"column":55,"nodeType":"171","messageId":"172","endLine":4,"endColumn":64},{"ruleId":"169","severity":1,"message":"195","line":4,"column":66,"nodeType":"171","messageId":"172","endLine":4,"endColumn":71},{"ruleId":"169","severity":1,"message":"196","line":4,"column":73,"nodeType":"171","messageId":"172","endLine":4,"endColumn":78},{"ruleId":"169","severity":1,"message":"197","line":5,"column":39,"nodeType":"171","messageId":"172","endLine":5,"endColumn":43},{"ruleId":"169","severity":1,"message":"198","line":5,"column":45,"nodeType":"171","messageId":"172","endLine":5,"endColumn":56},{"ruleId":"169","severity":1,"message":"199","line":5,"column":58,"nodeType":"171","messageId":"172","endLine":5,"endColumn":69},{"ruleId":"169","severity":1,"message":"200","line":5,"column":71,"nodeType":"171","messageId":"172","endLine":5,"endColumn":80},{"ruleId":"169","severity":1,"message":"201","line":5,"column":121,"nodeType":"171","messageId":"172","endLine":5,"endColumn":131},{"ruleId":"202","severity":1,"message":"203","line":107,"column":1,"nodeType":"204","messageId":"205","endLine":107,"endColumn":21},{"ruleId":"202","severity":1,"message":"203","line":132,"column":1,"nodeType":"204","messageId":"205","endLine":132,"endColumn":16},{"ruleId":"202","severity":1,"message":"203","line":296,"column":1,"nodeType":"204","messageId":"205","endLine":296,"endColumn":17},{"ruleId":"202","severity":1,"message":"203","line":423,"column":2,"nodeType":"204","messageId":"205","endLine":423,"endColumn":9},{"ruleId":"169","severity":1,"message":"206","line":5,"column":8,"nodeType":"171","messageId":"172","endLine":5,"endColumn":11},{"ruleId":"169","severity":1,"message":"207","line":19,"column":7,"nodeType":"171","messageId":"172","endLine":19,"endColumn":12},{"ruleId":"169","severity":1,"message":"208","line":25,"column":7,"nodeType":"171","messageId":"172","endLine":25,"endColumn":13},{"ruleId":"169","severity":1,"message":"209","line":41,"column":7,"nodeType":"171","messageId":"172","endLine":41,"endColumn":24},{"ruleId":"169","severity":1,"message":"210","line":51,"column":7,"nodeType":"171","messageId":"172","endLine":51,"endColumn":22},{"ruleId":"169","severity":1,"message":"211","line":67,"column":10,"nodeType":"171","messageId":"172","endLine":67,"endColumn":22},{"ruleId":"178","severity":1,"message":"187","line":75,"column":6,"nodeType":"180","endLine":75,"endColumn":8,"suggestions":"212"},{"ruleId":"169","severity":1,"message":"213","line":90,"column":9,"nodeType":"171","messageId":"172","endLine":90,"endColumn":27},{"ruleId":"169","severity":1,"message":"214","line":98,"column":9,"nodeType":"171","messageId":"172","endLine":98,"endColumn":28},{"ruleId":"169","severity":1,"message":"215","line":104,"column":9,"nodeType":"171","messageId":"172","endLine":104,"endColumn":26},{"ruleId":"169","severity":1,"message":"216","line":107,"column":9,"nodeType":"171","messageId":"172","endLine":107,"endColumn":27},{"ruleId":"169","severity":1,"message":"206","line":6,"column":8,"nodeType":"171","messageId":"172","endLine":6,"endColumn":11},{"ruleId":"169","severity":1,"message":"175","line":16,"column":15,"nodeType":"171","messageId":"172","endLine":16,"endColumn":24},"no-unused-vars","'FormControlLabel' is defined but never used.","Identifier","unusedVar","'Checkbox' is defined but never used.","'addDoc' is defined but never used.","'updateDoc' is defined but never used.","'deleteDoc' is defined but never used.","'users' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getUserData'. Either include it or remove the dependency array.","ArrayExpression",["217"],"'userCredential' is assigned a value but never used.","'checkUser' is assigned a value but never used.","'doc' is defined but never used.","'error' is assigned a value but never used.",["218"],"React Hook useEffect has a missing dependency: 'getJobData'. Either include it or remove the dependency array.",["219"],"no-dupe-keys","Duplicate key 'position'.","ObjectExpression","unexpected","'collection' is defined but never used.","'getDocs' is defined but never used.","'query' is defined but never used.","'where' is defined but never used.","'Card' is defined but never used.","'CardActions' is defined but never used.","'CardContent' is defined but never used.","'TextField' is defined but never used.","'PaperProps' is defined but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'Box' is defined but never used.","'style' is assigned a value but never used.","'Search' is assigned a value but never used.","'SearchIconWrapper' is assigned a value but never used.","'StyledInputBase' is assigned a value but never used.","'anchorElUser' is assigned a value but never used.",["220"],"'handleOpenUserMenu' is assigned a value but never used.","'handleCloseUserMenu' is assigned a value but never used.","'handleExpandClick' is assigned a value but never used.","'handleProfileClick' is assigned a value but never used.",{"desc":"221","fix":"222"},{"desc":"221","fix":"223"},{"desc":"224","fix":"225"},{"desc":"224","fix":"226"},"Update the dependencies array to be: [getUserData]",{"range":"227","text":"228"},{"range":"229","text":"228"},"Update the dependencies array to be: [getJobData]",{"range":"230","text":"231"},{"range":"232","text":"231"},[2102,2104],"[getUserData]",[1115,1117],[1493,1495],"[getJobData]",[2349,2351]]