{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kaleb\\\\source\\\\repos\\\\Fighting-Mongooses\\\\src\\\\components\\\\JobsSideTest.js\",\n  _s = $RefreshSig$();\nimport { React, useEffect, useState } from 'react';\nimport { db } from './firebase-config';\nimport { collection, getDocs, addDoc, doc, updateDoc, deleteDoc, query, where } from \"firebase/firestore\";\nimport 'firebase/firestore';\nimport JobForm from './jobForm';\nimport ActionButtons from './actionButtons';\nimport JobList from './jobList';\nimport Header from './TestHeader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction JobsSide() {\n  _s();\n  // Define state variables to manage form input and job data\n  const [jobs, setJobs] = useState([]);\n  const [courseID, setCourseID] = useState(\"\");\n  const [term, setTerm] = useState(\"\");\n  const [type, setType] = useState(\"\");\n  const [numPositions, setNumPosition] = useState(\"\");\n  const [state, setState] = useState(\"\");\n\n  //popup card \n  const [users, setUsers] = useState([]);\n  const [showPopup, setShowPopup] = useState(false);\n\n  // reference to the \"backenddata\" collection in Firestore\n  const JobCollectionRef = collection(db, \"backenddata\");\n  // reference to the \"profile\" collection in Firestore\n  const UserCollectionRef = collection(db, \"profile\");\n  useEffect(() => {\n    getUserData();\n  }, []);\n\n  // Fetch data from Firestore and update the state variable \"jobs\"\n  const getUserData = async () => {\n    const data = await getDocs(UserCollectionRef);\n    setUsers(data.docs.map(elem => ({\n      ...elem.data(),\n      id: elem.id\n    })));\n  };\n\n  // Use the useEffect hook to fetch data from Firestore when the component mounts\n  useEffect(() => {\n    getJobData();\n  }, []);\n\n  // Fetch data from Firestore and update the state variable \"jobs\"\n  const getJobData = async () => {\n    const data = await getDocs(JobCollectionRef);\n    setJobs(data.docs.map(elem => ({\n      ...elem.data(),\n      id: elem.id\n    })));\n  };\n\n  /* This function may need to be used to find applicants to a specific job\r\n  useEffect(() => {\r\n    async function fetchUserProfiles() {\r\n      const userProfiles = await getUserProfiles();\r\n      setUsers(userProfiles);\r\n    }\r\n    fetchUserProfiles();\r\n  }, []);\r\n    const getUserProfiles = async () => {\r\n    try {\r\n      const userProfilesCollectionRef = collection(db, 'profile');\r\n      const querySnapshot = await getDocs(userProfilesCollectionRef);\r\n      const userProfiles = [];\r\n      querySnapshot.forEach((doc) => {\r\n        userProfiles.push({ id: doc.id, ...doc.data() });\r\n      });\r\n      return userProfiles;\r\n    } catch (error) {\r\n      console.error('Error retrieving user profiles: ', error);\r\n      return null;\r\n    }\r\n  }*/\n\n  // Add a new job to Firestore\n  const createJob = async () => {\n    try {\n      // Query Firebase for documents that match the specified courseID\n      const jobQuerySnapshot = await getDocs(query(JobCollectionRef, where(\"Courseid\", \"==\", courseID.toUpperCase())));\n      if (jobQuerySnapshot.docs.length === 0) {\n        await addDoc(JobCollectionRef, {\n          Courseid: courseID.toUpperCase(),\n          Term: term,\n          Type: type,\n          NumPositions: numPositions,\n          State: state\n        });\n        window.location.reload();\n      } else {\n        alert(`A job with CourseID ${courseID.toUpperCase()} already exists.`);\n      }\n    } catch (error) {\n      console.error(\"Error creating document: \", error);\n    }\n  };\n  const handleUpdate = async () => {\n    // Create an object with the updated data for the document\n    const updatedData = {\n      Courseid: courseID,\n      Term: term,\n      Type: type,\n      NumPositions: numPositions,\n      State: state\n    };\n    // Call the updateJob function with the courseID and updated data\n    const updated = await updateJob(courseID, updatedData);\n    if (!updated) {\n      alert(`No job found with CourseID ${courseID}`);\n    }\n  };\n\n  // Define a function that updates a document in Firebase with the specified ID\n  const updateJob = async (id, updatedData) => {\n    try {\n      // Query Firebase for documents that match the specified courseID\n      const jobQuerySnapshot = await getDocs(query(JobCollectionRef, where(\"Courseid\", \"==\", id)));\n      // If there is at least one document that matches the query\n      if (jobQuerySnapshot.docs.length > 0) {\n        // Get the reference to the first document that matches the query\n        const jobRef = jobQuerySnapshot.docs[0].ref;\n        // Update the document with the updated data\n        await updateDoc(jobRef, updatedData);\n        console.log(\"Document successfully updated!\");\n        window.location.reload();\n        return true;\n      } else {\n        return false;\n      }\n    } catch (error) {\n      console.error(\"Error updating document: \", error);\n    }\n  };\n  const handleDelete = async () => {\n    const deleted = await deleteJob(courseID);\n    if (!deleted) {\n      alert(`No job found with CourseID ${courseID}`);\n    }\n  };\n  const deleteJob = async id => {\n    try {\n      const jobQuerySnapshot = await getDocs(query(JobCollectionRef, where(\"Courseid\", \"==\", id)));\n      if (jobQuerySnapshot.docs.length > 0) {\n        await deleteDoc(jobQuerySnapshot.docs[0].ref);\n        console.log(\"Document successfully deleted!\");\n        window.location.reload();\n        return true;\n      } else {\n        return false;\n      }\n    } catch (error) {\n      console.error(\"Error deleting document: \", error);\n    }\n  };\n\n  // Check user\n  // Define an asynchronous function called \"checkUser\"\n  const checkUser = async () => {\n    await addDoc(JobCollectionRef, {\n      Courseid: courseID,\n      Term: term,\n      Type: type,\n      NumPositions: numPositions,\n      State: state\n    });\n\n    // Reload the page after the new document has been added\n    window.location.reload();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"split-screen\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"split-screen-left\",\n        children: [/*#__PURE__*/_jsxDEV(JobForm, {\n          setCourseID: setCourseID,\n          setTerm: setTerm,\n          setType: setType,\n          setNumPosition: setNumPosition,\n          setState: setState\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ActionButtons, {\n          createJob: createJob,\n          handleUpdate: handleUpdate,\n          handleDelete: handleDelete\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"split-screen-right\",\n        children: /*#__PURE__*/_jsxDEV(JobList, {\n          jobs: jobs,\n          users: users,\n          showPopup: showPopup,\n          setShowPopup: setShowPopup\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 5\n  }, this);\n}\n_s(JobsSide, \"9HLzPZLr67yhw0NIc1/UK6fJtlA=\");\n_c = JobsSide;\nexport default JobsSide;\nvar _c;\n$RefreshReg$(_c, \"JobsSide\");","map":{"version":3,"names":["React","useEffect","useState","db","collection","getDocs","addDoc","doc","updateDoc","deleteDoc","query","where","JobForm","ActionButtons","JobList","Header","JobsSide","jobs","setJobs","courseID","setCourseID","term","setTerm","type","setType","numPositions","setNumPosition","state","setState","users","setUsers","showPopup","setShowPopup","JobCollectionRef","UserCollectionRef","getUserData","data","docs","map","elem","id","getJobData","createJob","jobQuerySnapshot","toUpperCase","length","Courseid","Term","Type","NumPositions","State","window","location","reload","alert","error","console","handleUpdate","updatedData","updated","updateJob","jobRef","ref","log","handleDelete","deleted","deleteJob","checkUser"],"sources":["C:/Users/Kaleb/source/repos/Fighting-Mongooses/src/components/JobsSideTest.js"],"sourcesContent":["import { React, useEffect, useState } from 'react';\r\nimport { db } from './firebase-config';\r\nimport { collection, getDocs, addDoc, doc, updateDoc, deleteDoc, query, where } from \"firebase/firestore\";\r\nimport 'firebase/firestore';\r\nimport JobForm from './jobForm';\r\nimport ActionButtons from './actionButtons';\r\nimport JobList from './jobList';\r\nimport Header from './TestHeader';\r\n\r\nfunction JobsSide() {\r\n  // Define state variables to manage form input and job data\r\n  const [jobs, setJobs] = useState([]);\r\n  const [courseID, setCourseID] = useState(\"\");\r\n  const [term, setTerm] = useState(\"\");\r\n  const [type, setType] = useState(\"\");\r\n  const [numPositions, setNumPosition] = useState(\"\");\r\n  const [state, setState] = useState(\"\");\r\n\r\n  //popup card \r\n  const [users, setUsers] = useState([]);\r\n  const [showPopup, setShowPopup] = useState(false);\r\n\r\n  // reference to the \"backenddata\" collection in Firestore\r\n  const JobCollectionRef = collection(db, \"backenddata\");\r\n  // reference to the \"profile\" collection in Firestore\r\n  const UserCollectionRef = collection(db, \"profile\");\r\n\r\n  useEffect(() => {\r\n    getUserData();\r\n  }, []);\r\n\r\n  // Fetch data from Firestore and update the state variable \"jobs\"\r\n  const getUserData = async () => {\r\n    const data = await getDocs(UserCollectionRef);\r\n    setUsers(data.docs.map((elem) => ({ ...elem.data(), id: elem.id })));\r\n  };\r\n\r\n  // Use the useEffect hook to fetch data from Firestore when the component mounts\r\n  useEffect(() => {\r\n    getJobData();\r\n  }, []);\r\n\r\n  // Fetch data from Firestore and update the state variable \"jobs\"\r\n  const getJobData = async () => {\r\n    const data = await getDocs(JobCollectionRef);\r\n    setJobs(data.docs.map((elem) => ({ ...elem.data(), id: elem.id })));\r\n  };\r\n\r\n  /* This function may need to be used to find applicants to a specific job\r\n  useEffect(() => {\r\n    async function fetchUserProfiles() {\r\n      const userProfiles = await getUserProfiles();\r\n      setUsers(userProfiles);\r\n    }\r\n    fetchUserProfiles();\r\n  }, []);\r\n\r\n  const getUserProfiles = async () => {\r\n    try {\r\n      const userProfilesCollectionRef = collection(db, 'profile');\r\n      const querySnapshot = await getDocs(userProfilesCollectionRef);\r\n      const userProfiles = [];\r\n      querySnapshot.forEach((doc) => {\r\n        userProfiles.push({ id: doc.id, ...doc.data() });\r\n      });\r\n      return userProfiles;\r\n    } catch (error) {\r\n      console.error('Error retrieving user profiles: ', error);\r\n      return null;\r\n    }\r\n  }*/\r\n\r\n  // Add a new job to Firestore\r\n  const createJob = async () => {\r\n    try {\r\n      // Query Firebase for documents that match the specified courseID\r\n      const jobQuerySnapshot = await getDocs(\r\n        query(JobCollectionRef, where(\"Courseid\", \"==\", courseID.toUpperCase()))\r\n      );\r\n      if (jobQuerySnapshot.docs.length === 0) {\r\n        await addDoc(JobCollectionRef, {\r\n          Courseid: courseID.toUpperCase(),\r\n          Term: term,\r\n          Type: type,\r\n          NumPositions: numPositions,\r\n          State: state,\r\n        });\r\n        window.location.reload();\r\n      } else {\r\n        alert(`A job with CourseID ${courseID.toUpperCase()} already exists.`);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error creating document: \", error);\r\n    }\r\n  };\r\n\r\n  const handleUpdate = async () => {\r\n    // Create an object with the updated data for the document\r\n    const updatedData = {\r\n      Courseid: courseID,\r\n      Term: term,\r\n      Type: type,\r\n      NumPositions: numPositions,\r\n      State: state,\r\n    };\r\n    // Call the updateJob function with the courseID and updated data\r\n    const updated = await updateJob(courseID, updatedData);\r\n    if (!updated) {\r\n      alert(`No job found with CourseID ${courseID}`);\r\n    }\r\n  };\r\n\r\n  // Define a function that updates a document in Firebase with the specified ID\r\n  const updateJob = async (id, updatedData) => {\r\n    try {\r\n      // Query Firebase for documents that match the specified courseID\r\n      const jobQuerySnapshot = await getDocs(query(JobCollectionRef, where(\"Courseid\", \"==\", id)));\r\n      // If there is at least one document that matches the query\r\n      if (jobQuerySnapshot.docs.length > 0) {\r\n        // Get the reference to the first document that matches the query\r\n        const jobRef = jobQuerySnapshot.docs[0].ref;\r\n        // Update the document with the updated data\r\n        await updateDoc(jobRef, updatedData);\r\n        console.log(\"Document successfully updated!\");\r\n        window.location.reload();\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error updating document: \", error);\r\n    }\r\n  };\r\n\r\n  const handleDelete = async () => {\r\n    const deleted = await deleteJob(courseID);\r\n    if (!deleted) {\r\n      alert(`No job found with CourseID ${courseID}`);\r\n    }\r\n  };\r\n\r\n  const deleteJob = async (id) => {\r\n    try {\r\n      const jobQuerySnapshot = await getDocs(query(JobCollectionRef, where(\"Courseid\", \"==\", id)));\r\n      if (jobQuerySnapshot.docs.length > 0) {\r\n        await deleteDoc(jobQuerySnapshot.docs[0].ref);\r\n        console.log(\"Document successfully deleted!\");\r\n        window.location.reload();\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error deleting document: \", error);\r\n    }\r\n  };\r\n\r\n  // Check user\r\n  // Define an asynchronous function called \"checkUser\"\r\n  const checkUser = async () => {\r\n\r\n    await addDoc(JobCollectionRef, {\r\n      Courseid: courseID,\r\n      Term: term,\r\n      Type: type,\r\n      NumPositions: numPositions,\r\n      State: state,\r\n    });\r\n\r\n    // Reload the page after the new document has been added\r\n    window.location.reload();\r\n  };\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <div className='split-screen'>\r\n        <div className='split-screen-left'>\r\n          <JobForm setCourseID={setCourseID} setTerm={setTerm} setType={setType} setNumPosition={setNumPosition} setState={setState} />\r\n          <ActionButtons createJob={createJob} handleUpdate={handleUpdate} handleDelete={handleDelete} />\r\n        </div>\r\n        <div className='split-screen-right'>\r\n          <JobList jobs={jobs} users={users} showPopup={showPopup} setShowPopup={setShowPopup} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\nexport default JobsSide;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}